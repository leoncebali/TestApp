package tg.geeknation.rajkat.models.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tg.geeknation.rajkat.models.Profil;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROFIL".
*/
public class ProfilDao extends AbstractDao<Profil, Long> {

    public static final String TABLENAME = "PROFIL";

    /**
     * Properties of entity Profil.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nom = new Property(1, String.class, "nom", false, "NOM");
        public final static Property Competence = new Property(2, String.class, "competence", false, "COMPETENCE");
        public final static Property Photo = new Property(3, Integer.class, "photo", false, "PHOTO");
    };


    public ProfilDao(DaoConfig config) {
        super(config);
    }
    
    public ProfilDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROFIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOM\" TEXT," + // 1: nom
                "\"COMPETENCE\" TEXT," + // 2: competence
                "\"PHOTO\" INTEGER);"); // 3: photo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROFIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Profil entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nom = entity.getNom();
        if (nom != null) {
            stmt.bindString(2, nom);
        }
 
        String competence = entity.getCompetence();
        if (competence != null) {
            stmt.bindString(3, competence);
        }
 
        Integer photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindLong(4, photo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Profil readEntity(Cursor cursor, int offset) {
        Profil entity = new Profil( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nom
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // competence
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // photo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Profil entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNom(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompetence(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoto(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Profil entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Profil entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
